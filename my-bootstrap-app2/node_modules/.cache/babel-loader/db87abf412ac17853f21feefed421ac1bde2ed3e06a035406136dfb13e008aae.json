{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || ''\n  // withCredentials: true,  // enable if you later want to send cookies automatically\n});\napi.interceptors.request.use(config => {\n  console.log('→ API Request ▶︎', {\n    url: `${config.baseURL}${config.url}`,\n    method: config.method,\n    headers: {\n      ...config.headers\n    }\n  });\n\n  // Get the token from cookies or localStorage\n  let token;\n  const cookieMatch = document.cookie.split('; ').find(row => row.startsWith('idToken='));\n  if (cookieMatch) {\n    token = cookieMatch.split('=')[1];\n  } else {\n    // Fallback to localStorage if cookie not found\n    token = localStorage.getItem('idToken');\n  }\n  if (token) {\n    config.headers = config.headers || {};\n    config.headers.Authorization = `Bearer ${token}`;\n    console.log('   • attached Authorization:', config.headers.Authorization);\n  } else {\n    console.warn('   ⚠️ no idToken found in cookies or localStorage');\n    // Don't throw here, let the server respond with 401\n  }\n  return config;\n}, err => Promise.reject(err));\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","interceptors","request","use","config","console","log","url","method","headers","token","cookieMatch","document","cookie","split","find","row","startsWith","localStorage","getItem","Authorization","warn","err","Promise","reject"],"sources":["d:/Github/Tasks/aws-taskmanager/my-bootstrap-app2/src/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || '',\n  // withCredentials: true,  // enable if you later want to send cookies automatically\n});\napi.interceptors.request.use((config) => {\n  console.log('→ API Request ▶︎', {\n    url: `${config.baseURL}${config.url}`,\n    method: config.method,\n    headers: { ...config.headers }\n  });\n\n  // Get the token from cookies or localStorage\n  let token;\n  const cookieMatch = document.cookie\n    .split('; ')\n    .find(row => row.startsWith('idToken='));\n  \n  if (cookieMatch) {\n    token = cookieMatch.split('=')[1];\n  } else {\n    // Fallback to localStorage if cookie not found\n    token = localStorage.getItem('idToken');\n  }\n\n  if (token) {\n    config.headers = config.headers || {};\n    config.headers.Authorization = `Bearer ${token}`;\n    console.log('   • attached Authorization:', config.headers.Authorization);\n  } else {\n    console.warn('   ⚠️ no idToken found in cookies or localStorage');\n    // Don't throw here, let the server respond with 401\n  }\n\n  return config;\n}, err => Promise.reject(err));\nexport default api;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI;EAC1C;AACF,CAAC,CAAC;AACFL,GAAG,CAACM,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvCC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAE;IAC9BC,GAAG,EAAE,GAAGH,MAAM,CAACP,OAAO,GAAGO,MAAM,CAACG,GAAG,EAAE;IACrCC,MAAM,EAAEJ,MAAM,CAACI,MAAM;IACrBC,OAAO,EAAE;MAAE,GAAGL,MAAM,CAACK;IAAQ;EAC/B,CAAC,CAAC;;EAEF;EACA,IAAIC,KAAK;EACT,MAAMC,WAAW,GAAGC,QAAQ,CAACC,MAAM,CAChCC,KAAK,CAAC,IAAI,CAAC,CACXC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,UAAU,CAAC,UAAU,CAAC,CAAC;EAE1C,IAAIN,WAAW,EAAE;IACfD,KAAK,GAAGC,WAAW,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACnC,CAAC,MAAM;IACL;IACAJ,KAAK,GAAGQ,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC;EACzC;EAEA,IAAIT,KAAK,EAAE;IACTN,MAAM,CAACK,OAAO,GAAGL,MAAM,CAACK,OAAO,IAAI,CAAC,CAAC;IACrCL,MAAM,CAACK,OAAO,CAACW,aAAa,GAAG,UAAUV,KAAK,EAAE;IAChDL,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEF,MAAM,CAACK,OAAO,CAACW,aAAa,CAAC;EAC3E,CAAC,MAAM;IACLf,OAAO,CAACgB,IAAI,CAAC,mDAAmD,CAAC;IACjE;EACF;EAEA,OAAOjB,MAAM;AACf,CAAC,EAAEkB,GAAG,IAAIC,OAAO,CAACC,MAAM,CAACF,GAAG,CAAC,CAAC;AAC9B,eAAe3B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}