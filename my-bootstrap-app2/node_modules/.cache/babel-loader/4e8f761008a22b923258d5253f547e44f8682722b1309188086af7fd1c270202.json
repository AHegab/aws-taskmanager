{"ast":null,"code":"import axios from 'axios';\n\n// Configure axios instance\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || '',\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  withCredentials: true,\n  timeout: 10000 // 10 second timeout\n});\n\n/**\n * Gets a cookie value by name\n * @param {string} name Cookie name\n * @returns {string|null} Cookie value or null if not found\n */\nconst getCookie = name => {\n  if (typeof document === 'undefined') return null; // SSR compatibility\n\n  const value = `; ${document.cookie}`;\n  const parts = value.split(`; ${name}=`);\n  if (parts.length === 2) return parts.pop().split(';').shift();\n  return null;\n};\n\n/**\n * Clears a cookie by name\n * @param {string} name Cookie name\n */\nconst clearCookie = name => {\n  if (typeof document === 'undefined') return;\n  document.cookie = `${name}=; path=/; expires=Thu, 01 Jan 1970 00:00:00 UTC; secure; samesite=strict`;\n};\n\n// Request interceptor\napi.interceptors.request.use(config => {\n  const requestLog = {\n    url: `${config.baseURL}${config.url}`,\n    method: config.method,\n    headers: {\n      ...config.headers\n    }\n  };\n  console.log('→ API Request ▶︎', requestLog);\n  const accessToken = getCookie('accessToken');\n  if (accessToken) {\n    // Basic JWT validation\n    try {\n      const tokenParts = accessToken.split('.');\n      if (tokenParts.length !== 3) throw new Error('Malformed JWT');\n      const payload = JSON.parse(atob(tokenParts[1]));\n      if (payload.exp * 1000 < Date.now()) throw new Error('Token expired');\n      config.headers.Authorization = `Bearer ${accessToken}`;\n      console.log('   • attached Authorization header');\n    } catch (error) {\n      console.error('Token validation failed:', error.message);\n      clearCookie('accessToken');\n      clearCookie('refreshToken');\n      // Continue request without token - let server reject it\n    }\n  } else {\n    console.warn('   ⚠️ No accessToken found in cookies');\n  }\n  return config;\n}, error => {\n  console.error('Request interceptor error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor\napi.interceptors.response.use(response => {\n  console.log('← API Response ◀︎', {\n    status: response.status,\n    data: response.data\n  });\n  return response;\n}, async error => {\n  var _error$response$data;\n  if (!error.response) {\n    // Network error\n    console.error('Network Error:', error.message);\n    return Promise.reject({\n      ...error,\n      message: 'Network error - please check your connection'\n    });\n  }\n  console.error('API Error:', {\n    status: error.response.status,\n    data: error.response.data,\n    config: error.config\n  });\n\n  // Handle 401 Unauthorized\n  if (error.response.status === 401) {\n    const originalRequest = error.config;\n\n    // Prevent infinite retry loops\n    if (originalRequest._retry) {\n      clearCookie('accessToken');\n      clearCookie('refreshToken');\n      return Promise.reject(error);\n    }\n    originalRequest._retry = true;\n    const refreshToken = getCookie('refreshToken');\n    if (refreshToken) {\n      try {\n        console.log('Attempting token refresh...');\n        const refreshResponse = await axios.post(`${process.env.REACT_APP_API_URL}/auth/refresh`, {\n          refreshToken\n        }, {\n          withCredentials: true\n        });\n        const newAccessToken = refreshResponse.data.accessToken;\n        if (newAccessToken) {\n          // Set new access token cookie\n          document.cookie = `accessToken=${newAccessToken}; path=/; max-age=${7 * 24 * 60 * 60}; secure; samesite=strict`;\n\n          // Retry original request\n          originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\n          return api(originalRequest);\n        }\n      } catch (refreshError) {\n        console.error('Token refresh failed:', refreshError);\n        clearCookie('accessToken');\n        clearCookie('refreshToken');\n        window.location.href = '/login'; // Redirect to login\n        return Promise.reject(refreshError);\n      }\n    } else {\n      console.warn('No refresh token available');\n      clearCookie('accessToken');\n      window.location.href = '/login'; // Redirect to login\n    }\n  }\n\n  // Handle other error statuses\n  if (error.response.status >= 500) {\n    error.message = 'Server error - please try again later';\n  } else if ((_error$response$data = error.response.data) !== null && _error$response$data !== void 0 && _error$response$data.message) {\n    error.message = error.response.data.message;\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","headers","withCredentials","timeout","getCookie","name","document","value","cookie","parts","split","length","pop","shift","clearCookie","interceptors","request","use","config","requestLog","url","method","console","log","accessToken","tokenParts","Error","payload","JSON","parse","atob","exp","Date","now","Authorization","error","message","warn","Promise","reject","response","status","data","_error$response$data","originalRequest","_retry","refreshToken","refreshResponse","post","newAccessToken","refreshError","window","location","href"],"sources":["d:/Github/Tasks/aws-taskmanager/my-bootstrap-app2/src/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Configure axios instance\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || '',\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  withCredentials: true,\n  timeout: 10000 // 10 second timeout\n});\n\n/**\n * Gets a cookie value by name\n * @param {string} name Cookie name\n * @returns {string|null} Cookie value or null if not found\n */\nconst getCookie = (name) => {\n  if (typeof document === 'undefined') return null; // SSR compatibility\n  \n  const value = `; ${document.cookie}`;\n  const parts = value.split(`; ${name}=`);\n  if (parts.length === 2) return parts.pop().split(';').shift();\n  return null;\n};\n\n/**\n * Clears a cookie by name\n * @param {string} name Cookie name\n */\nconst clearCookie = (name) => {\n  if (typeof document === 'undefined') return;\n  document.cookie = `${name}=; path=/; expires=Thu, 01 Jan 1970 00:00:00 UTC; secure; samesite=strict`;\n};\n\n// Request interceptor\napi.interceptors.request.use((config) => {\n  const requestLog = {\n    url: `${config.baseURL}${config.url}`,\n    method: config.method,\n    headers: { ...config.headers }\n  };\n  console.log('→ API Request ▶︎', requestLog);\n\n  const accessToken = getCookie('accessToken');\n  \n  if (accessToken) {\n    // Basic JWT validation\n    try {\n      const tokenParts = accessToken.split('.');\n      if (tokenParts.length !== 3) throw new Error('Malformed JWT');\n      \n      const payload = JSON.parse(atob(tokenParts[1]));\n      if (payload.exp * 1000 < Date.now()) throw new Error('Token expired');\n      \n      config.headers.Authorization = `Bearer ${accessToken}`;\n      console.log('   • attached Authorization header');\n    } catch (error) {\n      console.error('Token validation failed:', error.message);\n      clearCookie('accessToken');\n      clearCookie('refreshToken');\n      // Continue request without token - let server reject it\n    }\n  } else {\n    console.warn('   ⚠️ No accessToken found in cookies');\n  }\n\n  return config;\n}, (error) => {\n  console.error('Request interceptor error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor\napi.interceptors.response.use(\n  (response) => {\n    console.log('← API Response ◀︎', {\n      status: response.status,\n      data: response.data\n    });\n    return response;\n  },\n  async (error) => {\n    if (!error.response) {\n      // Network error\n      console.error('Network Error:', error.message);\n      return Promise.reject({\n        ...error,\n        message: 'Network error - please check your connection'\n      });\n    }\n\n    console.error('API Error:', {\n      status: error.response.status,\n      data: error.response.data,\n      config: error.config\n    });\n\n    // Handle 401 Unauthorized\n    if (error.response.status === 401) {\n      const originalRequest = error.config;\n      \n      // Prevent infinite retry loops\n      if (originalRequest._retry) {\n        clearCookie('accessToken');\n        clearCookie('refreshToken');\n        return Promise.reject(error);\n      }\n\n      originalRequest._retry = true;\n      const refreshToken = getCookie('refreshToken');\n\n      if (refreshToken) {\n        try {\n          console.log('Attempting token refresh...');\n          const refreshResponse = await axios.post(\n            `${process.env.REACT_APP_API_URL}/auth/refresh`,\n            { refreshToken },\n            { withCredentials: true }\n          );\n\n          const newAccessToken = refreshResponse.data.accessToken;\n          if (newAccessToken) {\n            // Set new access token cookie\n            document.cookie = `accessToken=${newAccessToken}; path=/; max-age=${7 * 24 * 60 * 60}; secure; samesite=strict`;\n            \n            // Retry original request\n            originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\n            return api(originalRequest);\n          }\n        } catch (refreshError) {\n          console.error('Token refresh failed:', refreshError);\n          clearCookie('accessToken');\n          clearCookie('refreshToken');\n          window.location.href = '/login'; // Redirect to login\n          return Promise.reject(refreshError);\n        }\n      } else {\n        console.warn('No refresh token available');\n        clearCookie('accessToken');\n        window.location.href = '/login'; // Redirect to login\n      }\n    }\n\n    // Handle other error statuses\n    if (error.response.status >= 500) {\n      error.message = 'Server error - please try again later';\n    } else if (error.response.data?.message) {\n      error.message = error.response.data.message;\n    }\n\n    return Promise.reject(error);\n  }\n);\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}