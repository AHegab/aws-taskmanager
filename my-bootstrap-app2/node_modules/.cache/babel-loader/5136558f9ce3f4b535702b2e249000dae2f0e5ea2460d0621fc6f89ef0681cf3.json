{"ast":null,"code":"var _jsxFileName = \"d:\\\\Github\\\\Tasks\\\\my-bootstrap-app2\\\\src\\\\pages\\\\CreateTask.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Container, Card, Form, Button, Alert } from 'react-bootstrap';\nimport api from '../api';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CreateTask() {\n  _s();\n  const navigate = useNavigate();\n  const userId = '00000000-0000-0000-0000-000000000000';\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [dueDate, setDueDate] = useState('');\n  const [files, setFiles] = useState([]);\n  const [error, setError] = useState(null);\n  const [saving, setSaving] = useState(false);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setError(null);\n    setSaving(true);\n    try {\n      const fd = new FormData();\n      fd.append('title', title);\n      fd.append('description', description);\n      fd.append('dueDate', dueDate);\n      fd.append('userId', userId);\n      files.forEach(f => fd.append('attachments', f));\n      const resp = await api.post('/tasks', fd, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      if (resp.status === 201) navigate('/tasks');else throw new Error(resp.data.error || 'Create failed');\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setSaving(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"my-5\",\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: \"mx-auto shadow-sm\",\n      style: {\n        maxWidth: '600px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n        as: \"h4\",\n        className: \"bg-primary text-white\",\n        children: \"Create New Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n        children: [error && /*#__PURE__*/_jsxDEV(Alert, {\n          variant: \"danger\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: handleSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(CreateTask, \"Wq5GLGbcQCrnF87Rbfl455qPGo0=\", false, function () {\n  return [useNavigate];\n});\n_c = CreateTask;\nvar _c;\n$RefreshReg$(_c, \"CreateTask\");","map":{"version":3,"names":["React","useState","Container","Card","Form","Button","Alert","api","useNavigate","jsxDEV","_jsxDEV","CreateTask","_s","navigate","userId","title","setTitle","description","setDescription","dueDate","setDueDate","files","setFiles","error","setError","saving","setSaving","handleSubmit","e","preventDefault","fd","FormData","append","forEach","f","resp","post","headers","status","Error","data","err","message","className","children","style","maxWidth","Header","as","fileName","_jsxFileName","lineNumber","columnNumber","Body","variant","onSubmit","_c","$RefreshReg$"],"sources":["d:/Github/Tasks/my-bootstrap-app2/src/pages/CreateTask.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Container, Card, Form, Button, Alert } from 'react-bootstrap';\nimport api from '../api';\nimport { useNavigate } from 'react-router-dom';\n\nexport default function CreateTask() {\n  const navigate = useNavigate();\n  const userId = '00000000-0000-0000-0000-000000000000';\n\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [dueDate, setDueDate] = useState('');\n  const [files, setFiles] = useState([]);\n  const [error, setError] = useState(null);\n  const [saving, setSaving] = useState(false);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setError(null);\n    setSaving(true);\n    try {\n      const fd = new FormData();\n      fd.append('title', title);\n      fd.append('description', description);\n      fd.append('dueDate', dueDate);\n      fd.append('userId', userId);\n      files.forEach(f => fd.append('attachments', f));\n\n      const resp = await api.post('/tasks', fd, {\n        headers: { 'Content-Type': 'multipart/form-data' }\n      });\n\n      if (resp.status === 201) navigate('/tasks');\n      else throw new Error(resp.data.error || 'Create failed');\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  return (\n    <Container className=\"my-5\">\n      <Card className=\"mx-auto shadow-sm\" style={{ maxWidth: '600px' }}>\n        <Card.Header as=\"h4\" className=\"bg-primary text-white\">Create New Task</Card.Header>\n        <Card.Body>\n          {error && <Alert variant=\"danger\">{error}</Alert>}\n          <Form onSubmit={handleSubmit}>\n            {/* Title, Description, DueDate, Attachments form groups here (as shown above) */}\n          </Form>\n        </Card.Body>\n      </Card>\n    </Container>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}